
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum UserRoleType {
  ADMIN
  STAFF
  OWNER
  TENANT
}

enum UnitType {
  STUDIO
  ONE_BED
  TWO_BED
  THREE_BED
  HOUSE
  ROOM
}

enum UnitStatusType {
  VACANT
  OCCUPIED
  MAINTENANCE
}

enum LeaseStatusType {
  PENDING
  ACTIVE
  TERMINATED
}

enum BillingStatusType {
  PENDING
  PARTIAL
  PAID
  OVERDUE
}

enum InitialBillingStatusType {
  PENDING
  PAID
}

enum BillingPaidForType {
  RENT
  WATER
  ELECTRICITY
  GARBAGE
  DAMAGES
  DEPOSIT
  OTHER
}

enum InspectionType {
  MONTHLY
  MOVE_IN
  MOVE_OUT
}

enum InspectionStatusType {
  PENDING
  COMPLETED
}

enum DamageSeverityType {
  MINOR
  MODERATE
  SEVERE
}

enum DamageStatusType {
  REPORTED
  ASSESSED
  IN_REPAIR
  COMPLETED
}

enum MaintenancePriorityType {
  LOW
  MEDIUM
  HIGH
  EMERGENCY
}

enum MaintenanceStatusType {
  PENDING
  SCHEDULED
  IN_PROGRESS
  COMPLETED
}

model users {
  user_id                                                   Int                  @id @default(autoincrement())
  email                                                     String               @unique @db.VarChar(100)
  password_hash                                             String               @db.VarChar(255)
  first_name                                                String               @db.VarChar(50)
  last_name                                                 String               @db.VarChar(50)
  phone                                                     String?              @db.VarChar(20)
  role                                                      UserRoleType?        
  status                                                    String?              @default("active") @db.VarChar(20)
  created_at                                                DateTime?            @default(now()) @db.Timestamp(6)
  updated_at                                                DateTime?            @default(now()) @db.Timestamp(6)
  leasedocument                                             leasedocument[]
  maintenancerequest_maintenancerequest_assigned_toTousers  maintenancerequest[] @relation("maintenancerequest_assigned_toTousers")
  maintenancerequest_maintenancerequest_requested_byTousers maintenancerequest[] @relation("maintenancerequest_requested_byTousers")
  owner                                                     owner[]
  tenant                                                    tenant[]
  unitinspection                                            unitinspection[]
}


model owner {
  owner_id     Int        @id @default(autoincrement())
  user_id      Int?
  company_name String?    @db.VarChar(100)
  tax_id       String?    @db.VarChar(50)
  created_at   DateTime?  @default(now()) @db.Timestamp(6)
  updated_at   DateTime?  @default(now()) @db.Timestamp(6)
  building     building[]
  users        users?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}


model building {
  building_id       Int                 @id @default(autoincrement())
  owner_id          Int?
  name              String              @db.VarChar(100)
  address_line1     String              @db.VarChar(100)
  address_line2     String?             @db.VarChar(100)
  city              String              @db.VarChar(50)
  state             String              @db.VarChar(50)
  postal_code       String              @db.VarChar(20)
  country           String              @db.VarChar(50)
  construction_year Int?
  total_units       Int
  status            String?             @default("active") @db.VarChar(20)
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  updated_at        DateTime?           @default(now()) @db.Timestamp(6)
  owner             owner?              @relation(fields: [owner_id], references: [owner_id], onDelete: NoAction, onUpdate: NoAction)
  buildingamenity buildingamenity[]
  unit              unit[]
}

model buildingamenity {
  building_id Int
  amenity_id  Int
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  amenity     amenity  @relation(fields: [amenity_id], references: [amenity_id], onDelete: NoAction, onUpdate: NoAction)
  building    building @relation(fields: [building_id], references: [building_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([building_id, amenity_id])
}

model amenity {
  amenity_id        Int                 @id @default(autoincrement())
  name              String              @db.VarChar(50)
  description       String?
  status            String?             @default("active") @db.VarChar(20)
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  updated_at        DateTime?           @default(now()) @db.Timestamp(6)
  buildingamenity buildingamenity[]
  unitmenity      unitamenity[]
}


model tenant {
  tenant_id               Int       @id @default(autoincrement())
  user_id                 Int?
  emergency_contact_name  String?   @db.VarChar(100)
  emergency_contact_phone String?   @db.VarChar(20)
  created_at              DateTime? @default(now()) @db.Timestamp(6)
  updated_at              DateTime? @default(now()) @db.Timestamp(6)
  damage                  damage[]
  lease                   lease[]
  users                   users?    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model leasedocument {
  document_id   Int       @id @default(autoincrement())
  lease_id      Int?
  document_type String    @db.VarChar(50)
  file_path     String    @db.VarChar(255)
  uploaded_by   Int?
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  lease         lease?    @relation(fields: [lease_id], references: [lease_id], onDelete: NoAction, onUpdate: NoAction)
  users         users?    @relation(fields: [uploaded_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}


model lease {
  lease_id            Int                   @id @default(autoincrement())
  unit_id             Int?
  tenant_id           Int?
  start_date          DateTime              @db.Date
  initial_term_months Int
  monthly_rent        Decimal               @db.Decimal(10, 2)
  security_deposit    Decimal               @db.Decimal(10, 2)
  status              LeaseStatusType?      @default(ACTIVE)
  created_at          DateTime?             @default(now()) @db.Timestamp(6)
  updated_at          DateTime?             @default(now()) @db.Timestamp(6)
  tenant              tenant?               @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)
  unit                unit?                 @relation(fields: [unit_id], references: [unit_id], onDelete: NoAction, onUpdate: NoAction)
  leasedocument       leasedocument[]
  leaseinitialbilling leaseinitialbilling[]
  monthlybilling      monthlybilling[]

  @@index([status], map: "idx_leases_status")
}


model leaseinitialbilling {
  initial_monthly_billing_id Int       @id @default(autoincrement())
  lease_id                   Int?
  start_date                 DateTime  @db.Date
  end_date                   DateTime  @db.Date
  full_month_amount          Decimal   @db.Decimal(10, 2)
  prorated_amount            Decimal   @db.Decimal(10, 2)
  days_occupied              Int
  status                     BillingStatusType? @default(PENDING) 
  created_at                 DateTime? @default(now()) @db.Timestamp(6)
  updated_at                 DateTime? @default(now()) @db.Timestamp(6)
  lease                      lease?    @relation(fields: [lease_id], references: [lease_id], onDelete: NoAction, onUpdate: NoAction)
}

model billing {
  billing_id         Int             @id @default(autoincrement())
  monthly_billing_id Int?
  amount             Decimal         @db.Decimal(10, 2)
  paid_for           BillingPaidForType? @default(RENT)
  created_at         DateTime?       @default(now()) @db.Timestamp(6)
  updated_at         DateTime?       @default(now()) @db.Timestamp(6)
  monthlybilling     monthlybilling? @relation(fields: [monthly_billing_id], references: [monthly_billing_id], onDelete: NoAction, onUpdate: NoAction)
}



model monthlybilling {
  monthly_billing_id Int       @id @default(autoincrement())
  lease_id           Int?
  billing_month      DateTime  @db.Date
  amount             Decimal   @db.Decimal(10, 2)
  due_date           DateTime  @db.Date
  status             BillingStatusType? @default(PENDING) 
  created_at         DateTime? @default(now()) @db.Timestamp(6)
  updated_at         DateTime? @default(now()) @db.Timestamp(6)
  billing            billing[]
  lease              lease?    @relation(fields: [lease_id], references: [lease_id], onDelete: NoAction, onUpdate: NoAction)
  payment            payment[]

  @@index([status, billing_month], map: "idx_monthly_billing_status")
}

model payment {
  payment_id            Int             @id @default(autoincrement())
  monthly_billing_id    Int?
  amount                Decimal         @db.Decimal(10, 2)
  payment_date          DateTime        @db.Timestamp(6)
  payment_method        String          @db.VarChar(50)
  transaction_reference String?         @db.VarChar(100)
  notes                 String?
  created_at            DateTime?       @default(now()) @db.Timestamp(6)
  monthlybilling        monthlybilling? @relation(fields: [monthly_billing_id], references: [monthly_billing_id], onDelete: NoAction, onUpdate: NoAction)
}



model unit {
  unit_id            Int                  @id @default(autoincrement())
  building_id        Int?
  unit_number        String               @db.VarChar(20)
  floor_number       Int?
  unit_type          String?              @db.VarChar(20)
  square_footage     Decimal?             @db.Decimal(10, 2)
  monthly_rent       Decimal              @db.Decimal(10, 2)
  status             UnitStatusType?      @default(VACANT) 
  created_at         DateTime?            @default(now()) @db.Timestamp(6)
  updated_at         DateTime?            @default(now()) @db.Timestamp(6)
  damage             damage[]
  lease              lease[]
  maintenancerequest maintenancerequest[]
  building           building?            @relation(fields: [building_id], references: [building_id], onDelete: NoAction, onUpdate: NoAction)
  unitamenity        unitamenity[]
  unitinspection     unitinspection[]

  @@unique([building_id, unit_number])
  @@index([status], map: "idx_units_status")
}



model unitamenity {
  amenity_id   Int
  unit_id      Int
  status       String?   @default("active") @db.VarChar(20)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  amenity     amenity  @relation(fields: [amenity_id], references: [amenity_id], onDelete: NoAction, onUpdate: NoAction)
  unit         unit?     @relation(fields: [unit_id], references: [unit_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([unit_id, amenity_id])
}


model unitinspection {
  inspection_id   Int       @id @default(autoincrement())
  unit_id         Int?
  inspector_id    Int?
  inspection_date DateTime  @db.Date
  inspection_type  InspectionType?
  status           InspectionStatusType? @default(PENDING)
  notes           String?
  created_at      DateTime? @default(now()) @db.Timestamp(6)
  updated_at      DateTime? @default(now()) @db.Timestamp(6)
  damage          damage[]
  users           users?    @relation(fields: [inspector_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  unit            unit?     @relation(fields: [unit_id], references: [unit_id], onDelete: NoAction, onUpdate: NoAction)
}


model damage {
  damage_id             Int                  @id @default(autoincrement())
  unit_id               Int?
  inspection_id         Int?
  tenant_id             Int?
  reported_date         DateTime             @db.Date
  discovered_during     String               @db.VarChar(50)
  description           String
  status                DamageStatusType?    @default(REPORTED)
  notes                 String?
  file_path   String    @db.VarChar(255)
  uploaded_by Int?
  created_at            DateTime?            @default(now()) @db.Timestamp(6)
  updated_at            DateTime?            @default(now()) @db.Timestamp(6)
  unitinspection        unitinspection?      @relation(fields: [inspection_id], references: [inspection_id], onDelete: NoAction, onUpdate: NoAction)
  tenant                tenant?              @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)
  unit                  unit?                @relation(fields: [unit_id], references: [unit_id], onDelete: NoAction, onUpdate: NoAction)
  maintenancerequest    maintenancerequest[]
  damageDetails         damageDetails[]

  @@index([status], map: "idx_damages_status")
}

model damageDetails {
  id                  Int                   @id @default(autoincrement())
  damage_id           Int                   @unique
  estimated_repair_cost Decimal?            @db.Decimal(10, 2)
  actual_repair_cost    Decimal?            @db.Decimal(10, 2)
  severity              DamageSeverityType?  
  repaired_date         DateTime?            @db.Date
  is_tenant_liable      String?              @default("0") @db.Bit(1)
  damage              damage?                @relation(fields: [damage_id], references: [damage_id], onDelete: Cascade, onUpdate: NoAction)
}



model maintenancerequest {
  request_id                                   Int       @id @default(autoincrement())
  damage_id                                    Int?
  unit_id                                      Int?
  requested_by                                 Int?
  assigned_to                                  Int?
  priority                                     MaintenancePriorityType?  
  description                                  String?
  scheduled_date                               DateTime? @db.Date
  completion_date                              DateTime? @db.Date
  status                                       MaintenanceStatusType?  @default(PENDING)  
  cost                                         Decimal?  @db.Decimal(10, 2)
  notes                                        String?
  created_at                                   DateTime? @default(now()) @db.Timestamp(6)
  updated_at                                   DateTime? @default(now()) @db.Timestamp(6)
  users_maintenancerequest_assigned_toTousers  users?    @relation("maintenancerequest_assigned_toTousers", fields: [assigned_to], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  damage                                       damage?   @relation(fields: [damage_id], references: [damage_id], onDelete: NoAction, onUpdate: NoAction)
  users_maintenancerequest_requested_byTousers users?    @relation("maintenancerequest_requested_byTousers", fields: [requested_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  unit                                         unit?     @relation(fields: [unit_id], references: [unit_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([status], map: "idx_maintenance_status")
}


model monthlyexpenses {
  month_year           DateTime  @id @db.Date
  total_maintenance    Decimal?  @db.Decimal(10, 2)
  total_utilities      Decimal?  @db.Decimal(10, 2)
  total_taxes          Decimal?  @db.Decimal(10, 2)
  total_other_expenses Decimal?  @db.Decimal(10, 2)
  total_expenses       Decimal?  @db.Decimal(10, 2)
  created_at           DateTime? @default(now()) @db.Timestamp(6)
}

model monthlyrevenue {
  month_year         DateTime  @id @db.Date
  total_rent         Decimal?  @db.Decimal(10, 2)
  total_other_income Decimal?  @db.Decimal(10, 2)
  total_revenue      Decimal?  @db.Decimal(10, 2)
  created_at         DateTime? @default(now()) @db.Timestamp(6)
}


